/* Roborugby    Team 8: Evan O'Keefe, Rachel Murphy and Phelim Dowling
Challenge 3 report.

As in the previous weeks, we had to split the challenge up into the seperate commands in order to program
 the robot successfully.
  We had alot more problems this week than previous weeks, as our program for the first task,
 to detect and drive along a white line, wouldn't work.
 After a long time making changes to the program we found the problem and corrected it,
 after this we got through the second task, which was to detect and drive towards one of the beacons, 
which are situated each end of the roborugby table, much easier.




/* Example program to test beacon receiver.
   Configured for internal receiver.  */

// first tell compiler to use beacon software
#use beacons.icb         
// note - cannot put comment on #use or # define
// define which beacon receiver to use: 1 internal, 2 external
#define BCNREC 2         
void main()
{
    int bcn;         // define variable for beacon result
    beacon_init(BCNREC);   // turn on beacon receiver
    printf("Collision prog. Press START\n");
    start_press();         // wait for START to be pressed
    /*printf("Driving\n");  // print message
    drive(100);         // drive forward, full speed*/
    
    /* while(!stop_button())// keep doing this until STOP is pressed
      {
        if(analog(2)<40&&analog(3)<40)
          {
            drive(50); 
        }
         if(analog(2)<40&&analog(3)>40)
          {
            drive(50);
        }
         if(analog(2)>40&&analog(3)<40)
          {
            drive(50);
        }
        if(analog(2)>40&&analog(3)>40)
          {
            while(analog(2)>40&&analog(3)>40)
              {turnaround(50);}
        } 
        
    }*/
    
    
    while(!stop_button())
      {
        bcn = checkbeacon(BCNREC);   // get beacon value using function
        printf("Beacon: %d\n", bcn);  // print message
        if( bcn == 12 )      // double beep for 12 ms beacon
          {           
            beep();
            sleep(0.1);
            beep();
            drive(100);
            
            if(checkSwitch()==1)//1 is when the left sensor is hit
              {
                
                beep();             // make sound
                printf("Collision!left\n");  // print message
                ao();            
                
            }
            if(checkSwitch()==2)//2 is for when the right sensor is hit it will follow instructions below
              {
                
                beep();             // make sound
                printf("Collision!right\n");  // print message
                ao();
                
                
            }
            if(checkSwitch()==3) //if both sensors are hit it will follow this method         
              {
                
                beep();             // make sound
                printf("Collision!straight\n");  // print message
                ao();
            }    
            
        }
        else if (bcn == 5)   //single beep for 5 ms beacon
          {
            beep();
            sleep(0.3);
            drive(100);
            
            if(checkSwitch()==1)//1 is when the left sensor is hit
              {
                
                beep();             // make sound
                printf("Collision!left\n");  // print message
                ao();
                
                
            }
            if(checkSwitch()==2)//2 is for when the right sensor is hit it will follow instructions below
              {
                
                beep();             // make sound
                printf("Collision!right\n");  // print message
                ao();
                
                
            }
            if(checkSwitch()==3) //if both sensors are hit it will follow this method         
              {
                beep();             // make sound
                printf("Collision!straight\n");  // print message
                ao();
            }    
            
        }
        
    }
    
    
}
void drive(int speed)
{
    motor(1,speed);    // run motors at specified speed
    motor(2,speed);    
}  // end of drive function
void turnleft(int speed,float second)
{
    motor(1,-speed);
    motor(2,speed);
    sleep(second);
}
void turnright(int speed,float second)
{
    motor(1,speed);
    motor(2,-speed);
    sleep(second);
}

void reverse(int speed, float time)
{
    motor(1, -speed);   // run both motors backwards at given speed
    motor(2, -speed);
    sleep(time);       // do nothing for given time
    motor(1,0);              // stop both motors
    motor(2,0);
}  // end of reverse function
int checkSwitch(void)
{
    return (digital(9) + 2*digital(10));  // calculate combined switch value and send it back
}  // end of checkSwitch function
void turnaround(int speed)
{
    motor(1,-speed);
    motor(2,speed);
}
int checkbeacon(int beaconReceiver)
{
    int btime = beacon(beaconReceiver);  // create variable and get beacon time
    if((btime > 11000) && (btime < 13000)) return 12;  //is it about 12 ms?
    else if((btime > 4000) && (btime < 6000)) return 5;  // is it about 5 ms?
    else return 0;   // if neither, return 0
} // end of checkbeacon function 
